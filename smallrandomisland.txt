# Small random island map for OpenSpades
# Copyright (C) 2022  Jarno van der Kolk
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import random
from pyspades import mapmaker
from pyspades.constants import *
from pyspades import server

name = 'Random small island'
version = '1.0'
author = 'DeathByDenim'
description = ('Random generated island map.')

def get_spawn_location(connection):
    if connection.team is connection.protocol.blue_team:
        x = random.randrange(170,230)
        y = random.randrange(140,300)
        z = connection.protocol.map.get_z(x, y)
        return (x, y, z)
    if connection.team is connection.protocol.green_team:
        x = random.randrange(250,310)
        y = random.randrange(140,300)
        z = connection.protocol.map.get_z(x, y)
        return (x, y, z)

def get_entity_location(team, entity_id):
    if entity_id == BLUE_FLAG:
        x = random.randrange(170,200)
        y = random.randrange(140,300)
        z = team.protocol.map.get_z(x, y)
        return (x, y, z)
    if entity_id == GREEN_FLAG:
        x = random.randrange(280,310)
        y = random.randrange(140,300)
        z = team.protocol.map.get_z(x, y)
        return (x, y, z)
    if entity_id == BLUE_BASE:
        x = random.randrange(170,200)
        y = random.randrange(140,300)
        z = team.protocol.map.get_z(x, y)
        return (x, y, z)
    if entity_id == GREEN_BASE:
        x = random.randrange(280,310)
        y = random.randrange(140,300)
        z = team.protocol.map.get_z(x, y)
        return (x, y, z)

def gen_script(basename, seed):
    # define the gradients

    grass = mapmaker.Gradient()
    grass.set_step_rgb(0, (2, 100, 86))
    grass.hsb(1, (102, 73, 58), 32, (106, 78, 71))
    grass.hsb(32, (106, 78, 71), 64, (106, 48, 86))

    snow = mapmaker.Gradient()
    snow.set_step_rgb(0, (101, 193, 214))
    snow.hsb(1, (221, 55, 48), 16, (184, 30, 84))
    snow.hsb(16, (184, 30, 84), 48, (160, 20, 87))
    snow.hsb(48, (160, 20, 87), 56, (140, 18, 98))
    snow.hsb(56, (140, 18, 98), 64, (142, 13, 100))

    hill = mapmaker.Gradient()
    hill.set_step_rgb(0, (2, 100, 86))
    hill.hsb(1, (102, 73, 58), 64, (17, 36, 87))

    water = mapmaker.Gradient()
    water.set_step_rgb(0, (2, 100, 86))
    water.hsb(1, (64, 26, 70), 16, (119, 65, 40))
    water.hsb(16, (119, 65, 40), 64, (125, 153, 61))

    # define biomes (gradient + avg. height infos)

    grass_biome = mapmaker.Biome(grass, 0.97, -0.1, 0.02)
    snow_biome = mapmaker.Biome(snow, 0.5, -0.4, 0.11)
    hill_biome = mapmaker.Biome(hill, 0.9, -0.3, 0.07)
    water_biome = mapmaker.Biome(water, 1.2, -0.16, 0.04)
    tundra_biome = mapmaker.Biome(snow, 1.14, -0.19, 0.1)

    # biome map - tiled biome instances

    bmap = mapmaker.BiomeMap([water_biome, snow_biome,
                              hill_biome, grass_biome,
                              tundra_biome], 32, 32)

    for n in range(10,20):
        for m in range(10,20):
            bmap.set_repeat(m, n, grass_biome)
    for n in range(13,17):
        for m in range(12,13):
            bmap.set_repeat(m, n, hill_biome)
        for m in range(16,17):
            bmap.set_repeat(m, n, hill_biome)
    bmap.jitter()

    # transform the biome map into a heightmap

    hmap, gradients = bmap.create_heightmap()
    hmap.midpoint_displace(0.3, 0.68, 4)
    hmap.jitter_colors(10)
    hmap.smoothing()
    hmap.truncate()
    hmap.rewrite_gradient_fill(gradients)
    hmap.rgb_noise_colors(-2, 2)
    hmap.smooth_colors()

    vxl = hmap.write_vxl()

    def tree(x, y):
        # space the trees into a "x" pattern
        x = ((x >> 1) << 1) + y % 2
        green_set = [mapmaker.make_color(98, 193, 69),
                     mapmaker.make_color(96, 229, 55),
                     mapmaker.make_color(94, 242, 48),
                     mapmaker.make_color(93, 209, 57),
                     mapmaker.make_color(92, 219, 57),
                     mapmaker.make_color(88, 210, 66)]
        brown = mapmaker.make_color(189, 124, 67)
        trunk_h = random.randint(4, 5)
        if x > 1 and y > 1 and x < 510 and y < 510:
            z = int(hmap.get(x, y) * 63 - 3 - trunk_h)
            if z >= 0 and z + 3 + trunk_h < 62:
                green = random.choice(green_set)
                for n in [[x, y, z, z + 3, z + 3, green],
                          [x + 1, y, z, z + 3, z + 3, green],
                          [x - 1, y, z, z + 3, z + 3, green],
                          [x, y + 1, z, z + 3, z + 3, green],
                          [x, y - 1, z, z + 3, z + 3, green],
                          [x, y, z + 3, z + 3 + trunk_h,
                              z + 3 + trunk_h - 1, brown],
                          [x + 1, y + 1, z + 1, z + 2, z + 2, green],
                          [x - 1, y + 1, z + 1, z + 2, z + 2, green],
                          [x + 1, y - 1, z + 1, z + 2, z + 2, green],
                          [x - 1, y - 1, z + 1, z + 2, z + 2, green],
                          [x + 2, y, z + 1, z + 2, z + 2, green],
                          [x - 2, y, z + 1, z + 2, z + 2, green],
                          [x, y - 2, z + 1, z + 2, z + 2, green],
                          [x, y + 2, z + 1, z + 2, z + 2, green]]:
                    vxl.set_column_fast(*n)

    def house(x, y):
        def rotated(x, y, centre_x, centre_y, direction):
            if direction == 0:
                return (x, y)
            elif direction == 1:
                return (-y + 2 * centre_y, x)
            elif direction == 2:
                return (-x + 2 * centre_x, -y + 2 * centre_y)
            else:
                return (y, -x + 2 * centre_x)

        white_set = [mapmaker.make_color(225, 239, 239),
                     mapmaker.make_color(255, 229, 255),
                     mapmaker.make_color(248, 242, 248),
                     mapmaker.make_color(254, 209, 224),
                     mapmaker.make_color(223, 239, 212),
                     mapmaker.make_color(247, 220, 233)]
        brown = mapmaker.make_color(128,128,0)
        grey = mapmaker.make_color(128,128,128)
        green = mapmaker.make_color(0,255,0)
        red = mapmaker.make_color(255,0,0)
        blue = mapmaker.make_color(0,0,255)
        wall_w = 9
        wall_l = 15
        wall_h = 4
        roof_h = 2
        house_h = wall_h + roof_h
        direction = random.randint(0, 3)
        if x > 1 and y > 1 and x < 510 and y < 510:
            z = int(hmap.get(x, y) * 63)
            zmax = z + 10
            if zmax > 63:
                zmax = 63
            if z >= 0: # and z + 3 + house_h < 62:
                # Floor
                for m in range(wall_w - 2):
                    for n in range(wall_l - 2):
                        vxl.set_column_fast(*rotated(x + m + 1, y + n + 1, x, y, direction), z - 2, z - 2, z - 2, brown)
                # Roof
                for m in range(wall_w):
                    for n in range(wall_l):
                        if m == 0 or n == 0 or m == wall_w - 1 or n == wall_l - 1:
                            h = 1
                        elif m == 1 or n == 1 or m == wall_w - 2 or n == wall_l - 2:
                            h = 2
                        else:
                            h = 3
                        vxl.set_column_fast(*rotated(x + m, y + n, x, y, direction), z - (wall_h + h + 2), z - (wall_h + 3), z - (wall_h + 3), red)
                # Walls
                white = random.choice(white_set)
                for n in range(wall_w):
                    vxl.set_column_fast(*rotated(x + n, y, x, y, direction), z - (wall_h + 2), zmax, z - 3, white)
                    vxl.set_column_fast(*rotated(x + n, y + wall_l - 1, x, y, direction), z - (wall_h + 2), zmax, z - 3, white)
                for n in range(wall_l):
                    vxl.set_column_fast(*rotated(x, y + n, x, y, direction), z - (wall_h + 2), zmax, z - 3, white)
                    vxl.set_column_fast(*rotated(x + wall_w - 1, y + n, x, y, direction), z - (wall_h + 2), zmax, z - 3, white)
                # Door
                for m in range(2,4):
                    for n in range(3,6):
                        vxl.remove_point(*rotated(x, y + m, x, y, direction), z - n)
                # Windows
                for k in range(2, wall_l - 2, 4):
                    for m in range(k, k + 2):
                        for n in range(4,6):
                            vxl.remove_point(*rotated(x, y + m, x, y, direction), z - n)
                            vxl.remove_point(*rotated(x + wall_w - 1, y + m, x, y, direction), z - n)
                # Stairs
                for m in range(1,5):
                    for n in range(1, 8):
                        vxl.set_column_fast(*rotated(x - n, y + m, x, y, direction), z - 3 + n, zmax, z, grey)

    for x in range(0, bmap.width):
        for y in range(0, bmap.height):
            if bmap.get_repeat(x, y) is hill_biome:
                left, top, right, bottom = bmap.rect_of_point(x, y)
                for ct in range(random.randint(1, 17)):
                    tree(random.randint(left, right),
                         random.randint(top, bottom))
    for x in range(0, bmap.width, 2):
        for y in range(0, bmap.height, 2):
            if bmap.get_repeat(x, y).id == 3 and random.randint(0, 10) < 3:
                left, top, right, bottom = bmap.rect_of_point(x, y)
                house(random.randint(left, right),
                        random.randint(top, bottom))

    return vxl
